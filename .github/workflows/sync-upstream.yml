name: Sync Fork with Upstream

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add upstream and fetch
        run: |
          git remote add upstream https://github.com/CoplayDev/unity-mcp.git || true
          git fetch upstream main

      - name: Debug state
        run: |
          echo "Current branch: $(git symbolic-ref --short HEAD || echo '<detached>')"
          echo "Our HEAD: $(git rev-parse --short HEAD)"
          echo "Upstream main: $(git rev-parse --short upstream/main)"
          echo "Ahead count (us..upstream): $(git rev-list --count HEAD..upstream/main)"
          git log --oneline --graph --decorate -n 10

      - name: Decide if behind
        id: behind
        run: |
          AHEAD=$(git rev-list --count HEAD..upstream/main)
          if [ "$AHEAD" -gt 0 ]; then
            echo "behind=true" >> $GITHUB_OUTPUT
          else
            echo "behind=false" >> $GITHUB_OUTPUT
          fi

      - name: Fast-forward (no merge commit)
        id: ff
        if: steps.behind.outputs.behind == 'true'
        run: |
          set -e
          git checkout -B main
          if git merge --ff-only upstream/main; then
            echo "mode=push" >> $GITHUB_OUTPUT
          else
            echo "mode=merge_pr" >> $GITHUB_OUTPUT
          fi

      - name: Push fast-forward
        if: steps.ff.outputs.mode == 'push'
        run: |
          git push origin main
          echo "Pushed FF update to origin/main"

      # Create a real branch and try a merge so there's something to PR
      - name: Create merge branch with upstream changes
        id: merge_branch
        if: steps.ff.outputs.mode == 'merge_pr'
        run: |
          set -e
          git checkout -B sync/merge-upstream main
          set +e
          git merge --no-edit upstream/main
          MERGE_STATUS=$?
          set -e
          if [ $MERGE_STATUS -ne 0 ]; then
            echo "conflict=true" >> $GITHUB_OUTPUT
            CONFLICTS=$(git diff --name-only --diff-filter=U || true)
            printf "conflict_files<<EOF\n%s\nEOF\n" "$CONFLICTS" >> $GITHUB_OUTPUT
            git merge --abort || true
          else
            echo "conflict=false" >> $GITHUB_OUTPUT
            git push -u origin sync/merge-upstream
          fi

      - name: Open PR (merge branch)
        if: steps.merge_branch.outputs.conflict == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { data: pr } = await github.rest.pulls.create({
              owner,
              repo,
              title: "Sync: Merge upstream/main into main",
              head: "sync/merge-upstream",
              base: "main",
              body: "Automated sync PR merging upstream/main into main."
            });
            core.info(`Created PR #${pr.number}`);

      - name: Create issue on conflict
        if: steps.merge_branch.outputs.conflict == 'true'
        uses: actions/github-script@v7
        env:
          CONFLICT_FILES: ${{ steps.merge_branch.outputs.conflict_files }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const conflictFiles = (process.env.CONFLICT_FILES || '').trim() || '(files not listed)';
            const title = "⚠️ Auto-sync failed: Merge conflict with upstream/main";
            const body = `
            The automatic sync from upstream failed due to merge conflicts.

            **Upstream:** \`CoplayDev/unity-mcp\` (branch: \`main\`)
            **Fork:** \`${owner}/${repo}\`
            **Workflow Run:** https://github.com/${owner}/${repo}/actions/runs/${context.runId}

            ### Conflicting files
            \`\`\`
            ${conflictFiles}
            \`\`\`

            ### How to resolve locally
            \`\`\`bash
            git clone https://github.com/${owner}/${repo}.git
            cd ${repo}
            git remote add upstream https://github.com/CoplayDev/unity-mcp.git
            git fetch upstream
            git checkout -B sync/merge-upstream origin/main
            git merge upstream/main
            # resolve conflicts, then:
            git add .
            git commit -m "Resolve upstream merge conflicts"
            git push -u origin sync/merge-upstream
            \`\`\`
            Then open a PR from \`sync/merge-upstream\` to \`main\`.
            `.trim();

            // Avoid duplicates: if an open conflict issue exists, add a comment instead
            const existing = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: 'auto-sync-conflict'
            });
            if (existing.data.length > 0) {
              await github.rest.issues.createComment({
                owner, repo,
                issue_number: existing.data[0].number,
                body: "Another sync attempt failed due to merge conflicts.\n\n" + body
              });
            } else {
              await github.rest.issues.create({
                owner, repo,
                title,
                body,
                labels: ['auto-sync-conflict','needs-attention']
              });
            }
